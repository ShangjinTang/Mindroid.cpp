import os

VARIANT_DIR = 'out'
LIB_MINDROID = 'mindroid'
LIB_TINYXML2 = 'tinyxml2'
LIB_GOOGLE_TEST = 'googletest'
TARGET_TESTS = 'Tests'
TARGET_MAIN = 'Main'

env = Environment(
    CC = "gcc",
    CXX = "g++",
    LD = "g++",
    AS = "gas",
    AR = "ar",
    RM = "rm",
    CPPFLAGS = "-c -g -O0 -fPIC -std=c++11 -fexceptions -fstack-protector -Wa,--noexecstack -D_FORTIFY_SOURCE=2 -frtti",
    LINKFLAGS = ['-pie', '-Wl,-z,noexecstack', '-Wl,-z,relro', '-Wl,-z,now'],
)

######################################################################
# Mindroid
LIB_MINDROID_SRCS = [
    "src/mindroid/app/ContextImpl.cpp",
    "src/mindroid/app/IOnSharedPreferenceChangeListener.cpp",
    "src/mindroid/app/Service.cpp",
    "src/mindroid/app/SharedPreferencesImpl.cpp",
    "src/mindroid/content/ComponentName.cpp",
    "src/mindroid/content/Context.cpp",
    "src/mindroid/content/ContextWrapper.cpp",
    "src/mindroid/content/Intent.cpp",
    "src/mindroid/content/pm/IPackageManager.cpp",
    "src/mindroid/content/pm/PackageManager.cpp",
    "src/mindroid/content/pm/PackageManagerService.cpp",
    "src/mindroid/io/BufferedInputStream.cpp",
    "src/mindroid/io/BufferedOutputStream.cpp",
    "src/mindroid/io/ByteArrayInputStream.cpp",
    "src/mindroid/io/ByteArrayOutputStream.cpp",
    "src/mindroid/io/DataInputStream.cpp",
    "src/mindroid/io/DataOutputStream.cpp",
    "src/mindroid/io/File.cpp",
    "src/mindroid/io/FileInputStream.cpp",
    "src/mindroid/io/FileOutputStream.cpp",
    "src/mindroid/io/InputStream.cpp",
    "src/mindroid/io/OutputStream.cpp",
    "src/mindroid/lang/Boolean.cpp",
    "src/mindroid/lang/ByteArray.cpp",
    "src/mindroid/lang/Byte.cpp",
    "src/mindroid/lang/Character.cpp",
    "src/mindroid/lang/Class.cpp",
    "src/mindroid/lang/Double.cpp",
    "src/mindroid/lang/Float.cpp",
    "src/mindroid/lang/Integer.cpp",
    "src/mindroid/lang/Long.cpp",
    "src/mindroid/lang/Math.cpp",
    "src/mindroid/lang/Object.cpp",
    "src/mindroid/lang/Short.cpp",
    "src/mindroid/lang/StringArray.cpp",
    "src/mindroid/lang/StringBuilder.cpp",
    "src/mindroid/lang/String.cpp",
    "src/mindroid/lang/System.cpp",
    "src/mindroid/lang/Thread.cpp",
    "src/mindroid/net/DatagramSocket.cpp",
    "src/mindroid/net/Inet4Address.cpp",
    "src/mindroid/net/Inet6Address.cpp",
    "src/mindroid/net/InetAddress.cpp",
    "src/mindroid/net/InetSocketAddress.cpp",
    "src/mindroid/net/NetworkInterface.cpp",
    "src/mindroid/net/ServerSocket.cpp",
    "src/mindroid/net/Socket.cpp",
    "src/mindroid/net/StandardSocketOptions.cpp",
    "src/mindroid/net/URI.cpp",
    "src/mindroid/nio/Buffer.cpp",
    "src/mindroid/nio/ByteArrayBuffer.cpp",
    "src/mindroid/nio/ByteBuffer.cpp",
    "src/mindroid/nio/file/Files.cpp",
    "src/mindroid/os/AsyncTask.cpp",
    "src/mindroid/os/Binder.cpp",
    "src/mindroid/os/Bundle.cpp",
    "src/mindroid/os/Environment.cpp",
    "src/mindroid/os/Handler.cpp",
    "src/mindroid/os/HandlerThread.cpp",
    "src/mindroid/os/IProcess.cpp",
    "src/mindroid/os/IRemoteCallback.cpp",
    "src/mindroid/os/IServiceManager.cpp",
    "src/mindroid/os/Looper.cpp",
    "src/mindroid/os/Message.cpp",
    "src/mindroid/os/MessageQueue.cpp",
    "src/mindroid/os/Parcel.cpp",
    "src/mindroid/os/Process.cpp",
    "src/mindroid/os/ServiceManager.cpp",
    "src/mindroid/os/SystemClock.cpp",
    "src/mindroid/runtime/inspection/Console.cpp",
    "src/mindroid/runtime/inspection/ConsoleService.cpp",
    "src/mindroid/runtime/inspection/ICommandHandler.cpp",
    "src/mindroid/runtime/inspection/IConsole.cpp",
    "src/mindroid/runtime/system/Mindroid.cpp",
    "src/mindroid/runtime/system/Plugin.cpp",
    "src/mindroid/runtime/system/Runtime.cpp",
    "src/mindroid/runtime/system/ServiceDiscoveryConfigurationReader.cpp",
    "src/mindroid/runtime/system/io/AbstractClient.cpp",
    "src/mindroid/runtime/system/io/AbstractServer.cpp",
    "src/mindroid/util/Assert.cpp",
    "src/mindroid/util/Base64.cpp",
    "src/mindroid/util/EventLog.cpp",
    "src/mindroid/util/Log.cpp",
    "src/mindroid/util/Properties.cpp",
    "src/mindroid/util/Variant.cpp",
    "src/mindroid/util/concurrent/AsyncAwait.cpp",
    "src/mindroid/util/concurrent/Executors.cpp",
    "src/mindroid/util/concurrent/SerialExecutor.cpp",
    "src/mindroid/util/concurrent/Thenable.cpp",
    "src/mindroid/util/concurrent/ThreadPoolExecutor.cpp",
    "src/mindroid/util/concurrent/atomic/AtomicBoolean.cpp",
    "src/mindroid/util/concurrent/atomic/AtomicInteger.cpp",
    "src/mindroid/util/concurrent/locks/ConditionImpl.cpp",
    "src/mindroid/util/concurrent/locks/ReentrantLock.cpp",
    "src/mindroid/util/logging/ConsoleHandler.cpp",
    "src/mindroid/util/logging/FileHandler.cpp",
    "src/mindroid/util/logging/ILogger.cpp",
    "src/mindroid/util/logging/LogBuffer.cpp",
    "src/mindroid/util/logging/Logger.cpp",
    "src/mindroid/util/logging/LoggerService.cpp",
],
env.StaticLibrary(
    target = LIB_MINDROID,
    source = [
        LIB_MINDROID_SRCS,
    ],
    CPPPATH = ['.', 'src'],
)

######################################################################
# TinyXML2
LIB_TINYXML2_SRCS = Glob('src/tinyxml2/*.cpp')
env.StaticLibrary(
    target = LIB_TINYXML2,
    source = [
        LIB_TINYXML2_SRCS,
    ],
    CPPPATH = ['.'],
)

######################################################################
# GoogleTest
LIB_GOOGLETEST_SRCS = Glob('googletest/*/*.cc')
env.StaticLibrary(
    target = LIB_GOOGLE_TEST,
    source = [
        LIB_GOOGLETEST_SRCS,
    ],
    CPPPATH = ['.', 'src', 'googletest', 'googletest/include'],
)

######################################################################
# Mindroid Tests
variant_dir = VariantDir(VARIANT_DIR, '.', duplicate=False)
MINDROID_TEST_SRCS = Glob('tests/mindroid/*/*.cpp')
MINDROID_TEST_OBJS = Environment(
    CPPPATH=['.', 'src', 'tests', 'googletest/include']
).Object(MINDROID_TEST_SRCS, variant_dir=variant_dir)

env.Program(
    target = TARGET_TESTS,
    source = [
        MINDROID_TEST_OBJS,
    ],
    LIBS = [
        LIB_MINDROID,
        LIB_TINYXML2,
        LIB_GOOGLE_TEST,
        "pthread",
        "rt",
    ],
    LIBPATH = [VARIANT_DIR],
)

tests_executable = os.path.join('.', VARIANT_DIR, TARGET_TESTS)
tests = Command(
    target = "TARGET_TESTS",
    source = MINDROID_TEST_SRCS,
    action = [tests_executable]
)

AlwaysBuild(tests)
Alias('tests', TARGET_TESTS)

######################################################################
# Mindroid Main
variant_dir = VariantDir(VARIANT_DIR, '.', duplicate=False)
MINDROID_MAIN_SRCS = [
    "src/main/Main.cpp",
    "examples/Concurrency/src/AsyncTaskExample.cpp",
    "examples/Concurrency/src/HandlerExample.cpp",
    "examples/Concurrency/src/PromiseExample.cpp",
    "examples/Eliza/gen/examples/eliza/IEliza.cpp",
    "examples/Eliza/gen/examples/eliza/IElizaListener.cpp",
    "examples/Eliza/src/Eliza.cpp",
    "examples/Eliza/src/ElizaService.cpp",
    "examples/Eliza/src/You.cpp",
    "examples/Eliza/src/util/Eliza.cpp",
    "examples/Services/src/ServiceExample1.cpp",
],
MINDROID_MAIN_OBJS = Environment(
    CPPPATH=[
        '.',
        'src',
        'examples/Concurrency/src',
        'examples/Eliza/src',
        'examples/Eliza/gen',
        'examples/Services/src',
    ]
).Object(MINDROID_MAIN_SRCS, variant_dir=variant_dir)

env.Program(
    target = TARGET_MAIN,
    source = [
        MINDROID_MAIN_OBJS,
    ],
    LIBS = [
        LIB_MINDROID,
        LIB_TINYXML2,
        "pthread",
        "rt",
    ],
    LIBPATH = [VARIANT_DIR],
)

main_executable = os.path.join('.', VARIANT_DIR, TARGET_MAIN)
main = Command(
    target = "TARGET_MAIN",
    source = MINDROID_MAIN_SRCS,
    action = [main_executable]
)

AlwaysBuild(main)
Alias('main', TARGET_MAIN)

######################################################################
